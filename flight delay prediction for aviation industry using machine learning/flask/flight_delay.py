# -*- coding: utf-8 -*-
"""flight delay.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jnf6M0Tp1lBVOsu3KVyL4QUSoKmfVDiz
"""

# importing required lib

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

# checking for available style

plt.style.available

# applying style to notebook

plt.style.use('fivethirtyeight')

# reading csv data

df = pd.read_csv('/content/flightdata.csv')
df.head()



# checking data type

df.info()

'''
Types of Analysis
1) univeriate analysis
2) Bivariate analysis
3) Multivariate analysis
4) Descripative analysis / statistics
'''

"""CRS_ARR_TIME	"""

# univariate analysis - extracting info from single colum

#checking data distribution

sns.distplot(df['CRS_ARR_TIME'])

# creating dummy dataframe categorical values

df_cat = df.select_dtypes(include='object')
df_cat.head()

for i,j in enumerate(df_cat):
  print(j)
  print(i)

plt.figure(figsize=(18,4))
for i,j in enumerate(df_cat):
  plt.subplot(1,4,i+1)

plt.figure(figsize=(18,4))
plt.subplot(121)
plt.subplot(122)
sns.countplot(df['DAY_OF_MONTH'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(131)
sns.countplot(df['ACTUAL_ELAPSED_TIME'])
plt.subplot(132)
sns.countplot(x='UNIQUE_CARRIER',data=df)

df['DAY_OF_MONTH'] = ['15 to 30' if x<=30 else "30-50" if x>30 and x<50 else '50+' for x in df ['DAY_OF_MONTH']]

df.head()

pd.crosstab(df['DEP_DELAY'],df['Unnamed: 25'])

sns.heatmap(df.corr())

df.describe(include='all')

df.shape

df.isnull().any()

df.dropna()

df.isnull().any()

sns.boxplot(df['DISTANCE'])

q1 = np.quantile(df['DISTANCE'],0.25)
q3 = np.quantile(df['DISTANCE'],0.75)

print('q1 ={}'.format(q1))
print('q3 ={}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

df.info()

sns.boxplot(df['DAY_OF_WEEK'])

q1 = np.quantile(df['DISTANCE'],0.25)
q3 = np.quantile(df['DISTANCE'],0.75)

print('Q1 ={}'.format(q1))
print('Q3 ={}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

upperBound = q3+(1.6*IQR)
lowerBound = q1-(1.6*IQR)

print('the upper bound value is {} & The lower bound is {}'.format(upperBound,lowerBound))

print('skwed data:',len(df['DISTANCE']>upperBound))

sns.distplot(df['DAY_OF_WEEK'])

sns.distplot(df['DAY_OF_WEEK'])

sns.distplot(df['DAY_OF_WEEK'])

df.head()

df['DISTANCE'] = [0 if x=='low' else 1 if x=='normal' else 2 for x in df['DISTANCE']]

df.head()

x = df.drop('DAY_OF_WEEK',axis=1)
x.head()

y =df['DAY_OF_WEEK']
y

# import necessary reg

import numpy as np
import pandas as pd

df = pd.read_csv('/content/flightdata.csv')

df.head()

df.info()

df.describe()

df.isnull().sum()

import matplotlib.pyplot as plt

plt.scatter(df['DAY_OF_MONTH'],df['QUARTER'])

x = df.iloc[:,0:1]
x.head()

y = df.iloc[:,1:]
y.head()

y = df.iloc[:,1:]
y.head()

from sklearn.linear_model import LinearRegression

lr = LinearRegression

df['ORIGIN'].unique()

array(['ATL', 'DTW', 'SEA', 'MSP', 'JFK'], dtype=object)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df.head()

